module tree;

var $sheets : tuple of atom := atom[];
var $growth_direction: tuple of atom := atom[];
var $trunks : tuple of atom := atom[];
var $crowns : tuple of atom := atom[];
var $splendorСrown : tuple of atom := atom[];
var $sprouts : tuple of atom := atom[];

var $tree_finded : boolean := false;

var $ch : tuple of atom := atom[a, b, c, d, e, f];

var $win1;
var $wy : integer := 20;



rule сбор_информации
   forall $x: Дерево( листья: $листья, направлениеРоста: $направление, ствол: $ствол, крона: $крона, пышностьКроны: $пышность, побег: $побег )
=>
   $sheets := $sheets + atom[$листья];
   $growth_direction := $growth_direction + atom[$направление];
   $trunks := $trunks + atom[$ствол];
   $crowns := $crowns + atom[$крона];
   $splendorСrown := $splendorСrown + atom[$пышность];
   $sprouts := $sprouts + atom[$побег];
end;



rule ввод
=>
   var $m1,$m2,$m3,$m4,$m5,$m6: integer;
   $m1 := Menu(400,50," Выберите листья", $sheets, 1 ); 
   $ch[1]:= $sheets[$m1];
   OutText( $win1, 50, $wy, $ch[1]);
   $wy:=$wy+15;


   $m2 := Menu(400,50," Выберите ствол", $trunks, 1 ); 
   $ch[2]:= $trunks[$m2];
   OutText( $win1, 50, $wy, $ch[2]);
   $wy:=$wy+15;


   $m3 := Menu(400,50," Выберите крону", $crowns, 1 );
   $ch[3]:= $crowns[$m3];
   OutText( $win1, 50, $wy, $ch[3]);
   $wy:=$wy+15;


   $m4 := Menu(400,50," Выберите побег", $sprouts, 1 ); 
   $ch[4]:= $sprouts[$m4];
   OutText( $win1, 50, $wy, $ch[4]);
   $wy:=$wy+15;

   $m5 := Menu(400,50," Выберите напраление роста листьев", $growth_direction, 1 ); 
   $ch[5]:= $growth_direction[$m5];
   OutText( $win1, 50, $wy, $ch[5]);
   $wy:=$wy+15;

   $m6 := Menu(400,50," Выберите пышность кроны", $splendorСrown, 1 ); 
   $ch[6]:= $splendorСrown[$m6];
   OutText( $win1, 50, $wy, $ch[6]);
   $wy:=$wy+15;
end;



rule Хвойные
exist $x: Хвойные( название: $название, листья: $листья, направлениеРоста: $направление, ствол: $ствол, крона: $крона, пышностьКроны: $пышность, побег: $побег)
	when( $листья = $ch[1] ) & ( $направление = $ch[5] ) & ( $ствол = $ch[2] ) & ( $крона = $ch[3] ) & ( $пышность = $ch[6] ) & ( $побег = $ch[4] )
=>
   $wy:=$wy+15;
   OutText( $win1, 50, $wy, "Класс: Хвойные");
   $wy:=$wy+15;
   OutText( $win1, 50, $wy, "Название: " + ToString($x.название));
   $wy:=$wy+15;

   $tree_finded := true;
   
end;

rule Широколиственные
exist $x: Широколиственные( название: $название, листья: $листья, направлениеРоста: $направление, ствол: $ствол, крона: $крона, пышностьКроны: $пышность, побег: $побег)
	when( $листья = $ch[1] ) & ( $направление = $ch[5] ) & ( $ствол = $ch[2] ) & ( $крона = $ch[3] ) & ( $пышность = $ch[6] ) & ( $побег = $ch[4] )
=>
   $wy:=$wy+15;
   OutText( $win1, 50, $wy, "Класс: Широколиственные");
   $wy:=$wy+15;
   OutText( $win1, 50, $wy, "Название: " + ToString($x.название));
   $wy:=$wy+15;

   $tree_finded := true;
   
end;

rule не_определено
exist not $x: Дерево( название: $название, листья: $листья, направлениеРоста: $направление, ствол: $ствол, крона: $крона, пышностьКроны: $пышность, побег: $побег)
		when( $листья = $ch[1] ) & ( $направление = $ch[5] ) & ( $ствол = $ch[2] ) & ( $крона = $ch[3] ) & ( $пышность = $ch[6] ) & ( $побег = $ch[4] )
=>
	$wy:=$wy+15;
	OutText( $win1, 50, $wy, "Ваш выбор не подходит ни под одно известное системе дерево. Попробуйте сделать другой выбор.");
	$wy:=$wy+15;
end;

// Правило для остановки
rule Stop
=>
  activate group();
end;

 var $правила : group := group( сбор_информации, ввод, Хвойные, Широколиственные, не_определено, Stop );

begin
  new

	@Ель: Хвойные(название: "Ель", листья: игловидные, направлениеРоста: перпендикулярно_стволу, ствол: коричневый, крона: треугольная, пышностьКроны: умеренно_пышная, побег: шишки),

	@Сосна: Хвойные(название: "Сосна", листья: игловидные, направлениеРоста: перпендикулярно_стволу, ствол: коричневый, крона: округлая, пышностьКроны: умеренно_пышная, побег: шишки),

	@Кедр: Хвойные(название: "Кедр", листья: игловидные, направлениеРоста: вверх, ствол: коричневый, крона: треугольная, пышностьКроны: не_пышная, побег: шишки),
 
	@Тополь: Широколиственные(название: "Тополь", листья: овальные_зубчатые, направлениеРоста: вверх, ствол: коричневый, крона: округлая, пышностьКроны: умеренно_пышная, побег: нет ),
    
	@Ива: Широколиственные(название: "Ива", листья: вытянутые_гладкие, направлениеРоста: вниз, ствол: коричневый, крона: приплюснутая, пышностьКроны: пышная, побег: нет),

	@Дуб: Широколиственные(название: "Дуб", листья: вытянутые_волнистые, направлениеРоста: перпендикулярно_стволу, ствол: коричневый, крона: округлая, пышностьКроны: пышная, побег: желуди ),
    
	@Клен: Широколиственные(название: "Клен", листья: волнистые_зубчатые, направлениеРоста: перпендикулярно_стволу, ствол: коричневый, крона: округлая, пышностьКроны: пышная, побег: нет ),

	@Каштан: Широколиственные(название: "Каштан", листья: многолистовой_зубчатый, направлениеРоста: перпендикулярно_стволу, ствол: коричневый, крона: округлая, пышностьКроны: пышная, побег: каштаны),

	@Липа: Широколиственные(название: "Липа", листья: овальные_зубчатые, направлениеРоста: перпендикулярно_стволу, ствол: коричневый, крона: округлая, пышностьКроны: пышная, побег: нет),

	@Береза: Широколиственные(название: "Береза", листья: овальные_зубчатые, направлениеРоста: перпендикулярно_стволу, ствол: белый_с_полосами, крона: округлая, пышностьКроны: умеренно_пышная, побег: нет);

 
   $win1 := MakeWindow("Вопросно-ответная система 'Деревья' ", 0,0,1010,640);  
   TextColor($win1,4);
   call $правила;
   WriteNet();

end.
